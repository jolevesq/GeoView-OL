{"version":3,"file":"corePackages/geoview-basemap-panel.js","mappings":"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","sources":["webpack://geoview-core/../geoview-basemap-panel/src/basemap-panel.tsx","webpack://geoview-core/../geoview-basemap-panel/src/index.tsx"],"sourcesContent":["import { TypeBasemapProps, TypeBasemapOptions, TypeJsonObject, TypeSelectChangeEvent, TypeWindow, TypeMapView } from 'geoview-core';\r\nimport { mapViewProjectionPayload } from 'geoview-core/src/api/events/payloads/map-view-projection-payload';\r\n\r\nconst w = window as TypeWindow;\r\n\r\ninterface BaseMapPanelProps {\r\n  mapId: string;\r\n  config: TypeJsonObject;\r\n}\r\n\r\nexport function BasemapPanel(props: BaseMapPanelProps): JSX.Element {\r\n  const { mapId, config } = props;\r\n\r\n  const { cgpv } = w;\r\n\r\n  const { api, react, ui } = cgpv;\r\n  const { Select } = ui.elements;\r\n\r\n  const { useState, useEffect } = react;\r\n\r\n  const useStyles = ui.makeStyles(() => ({\r\n    listContainer: {\r\n      marginTop: '10px',\r\n      height: '95%',\r\n    },\r\n    card: {\r\n      boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2)',\r\n      transition: '0.3s',\r\n      borderRadius: '5px',\r\n      '&:hover': {\r\n        boxShadow: '0 8px 16px 0 rgba(0, 0, 0, 0.2)',\r\n      },\r\n      marginBottom: 10,\r\n      height: '250px',\r\n      width: '100%',\r\n      display: 'block',\r\n      position: 'relative',\r\n    },\r\n    thumbnail: {\r\n      borderRadius: '5px',\r\n      position: 'absolute',\r\n      height: '100%',\r\n      width: '100%',\r\n      opacity: 0.8,\r\n    },\r\n    container: {\r\n      background: 'rgba(0,0,0,.68)',\r\n      color: '#fff',\r\n      overflow: 'hidden',\r\n      textOverflow: 'ellipsis',\r\n      height: '40px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      padding: '0 5px',\r\n      boxSizing: 'border-box',\r\n      position: 'absolute',\r\n      left: 0,\r\n      bottom: 0,\r\n      width: 'inherit',\r\n    },\r\n  }));\r\n\r\n  const [basemapList, setBasemapList] = useState<TypeBasemapProps[]>([]);\r\n  const [canSwichProjection] = useState(config.canSwichProjection);\r\n\r\n  const classes = useStyles();\r\n\r\n  const projections: number[] = (config.supportedProjection as number[]) || [];\r\n  const [mapProjection, setMapProjection] = useState(cgpv.api.map(mapId).mapProps.map.projection);\r\n\r\n  /**\r\n   * Update the basemap with the layers on the map\r\n   *\r\n   * @param {string} id update the basemap on the map\r\n   */\r\n  const setBasemap = (id: string) => {\r\n    api.map(mapId).basemap.setBasemap(id);\r\n  };\r\n\r\n  /**\r\n   * Add basemaps from configuration\r\n   */\r\n  const addBasemaps = async () => {\r\n    // reset the basemaps array\r\n    api.map(mapId).basemap.basemaps = [];\r\n\r\n    // create the custom config basemap\r\n    for (let basemapIndex = 0; basemapIndex < config.customBasemaps.length; basemapIndex++) {\r\n      const customBasemap = config.customBasemaps[basemapIndex] as TypeJsonObject;\r\n      const basemap = api.map(mapId).basemap.createCustomBasemap(customBasemap as unknown as TypeBasemapProps);\r\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\r\n\r\n      // custom basemap are provided set it by default (can't be set as basemap from geoview config)\r\n      if (basemap && basemapIndex === 0) setBasemap(basemap.id!);\r\n    }\r\n\r\n    // create the core basemap\r\n    for (let basemapIndex = 0; basemapIndex < config.coreBasemaps.length; basemapIndex++) {\r\n      const basemapOptions = config.coreBasemaps[basemapIndex] as TypeJsonObject;\r\n      // eslint-disable-next-line no-await-in-loop\r\n      const basemap = await api.map(mapId).basemap.createCoreBasemap(basemapOptions as unknown as TypeBasemapOptions);\r\n      if (basemap) setBasemapList((prevArray) => [...prevArray, basemap]);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set layerType from form input\r\n   *\r\n   * @param {TypeSelectChangeEvent} event TextField event\r\n   */\r\n  const setSelectedProjection = (event: TypeSelectChangeEvent<unknown>) => {\r\n    setMapProjection(event.target.value as number);\r\n    api.event.emit(mapViewProjectionPayload(api.eventNames.MAP.EVENT_MAP_VIEW_PROJECTION_CHANGE, mapId, event.target.value as number));\r\n\r\n    // get view status\r\n    const currentView = api.map(mapId).getView();\r\n    const currentCenter = currentView.getCenter();\r\n    const currentProjection = currentView.getProjection().getCode();\r\n\r\n    // calculate points resolution and new center (from lat long)\r\n    const currentPointResolution = api.projection.getResolution(currentProjection, currentCenter as number[]);\r\n    const newCenter = api.projection.transformPoints(currentCenter, currentProjection, 'EPSG:4326')[0];\r\n    const newProjection = `EPSG:${event.target.value as number}`;\r\n    const newPointResolution = api.projection.getResolution(newProjection, newCenter as number[]);\r\n    const newResolution = (currentView.getResolution() || 0 * currentPointResolution) / newPointResolution;\r\n\r\n    const newView: TypeMapView = {\r\n      zoom: currentView.getZoom() as number,\r\n      minZoom: currentView.getMinZoom(),\r\n      maxZoom: currentView.getMaxZoom(),\r\n      center: newCenter as number[],\r\n      projection: newProjection as string,\r\n      resolution: newResolution,\r\n    };\r\n\r\n    api.map(mapId).setView(newView);\r\n  };\r\n\r\n  /**\r\n   * load existing basemaps and create new basemaps\r\n   */\r\n  useEffect(() => {\r\n    addBasemaps();\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {canSwichProjection && (\r\n        <Select\r\n          fullWidth\r\n          labelId=\"projection-label\"\r\n          value={mapProjection}\r\n          onChange={setSelectedProjection}\r\n          label=\"Projection\"\r\n          style={{\r\n            display: config.canSwichProjection ? 'flex' : 'none',\r\n          }}\r\n          inputLabel={{\r\n            id: 'projection-label',\r\n          }}\r\n          menuItems={projections.map((value: number) => ({\r\n            key: value,\r\n            item: {\r\n              value,\r\n              children: `EPSG:${value}`,\r\n            },\r\n          }))}\r\n        />\r\n      )}\r\n      <div className={classes.listContainer}>\r\n        {basemapList.map((basemap: TypeBasemapProps) => {\r\n          return (\r\n            <div\r\n              role=\"button\"\r\n              tabIndex={0}\r\n              className={classes.card}\r\n              onClick={() => setBasemap(basemap.id as string)}\r\n              onKeyPress={() => setBasemap(basemap.id as string)}\r\n              key={basemap.id}\r\n            >\r\n              {typeof basemap.thumbnailUrl === 'string' && (\r\n                <img src={basemap.thumbnailUrl} alt={basemap.altText} className={classes.thumbnail} />\r\n              )}\r\n              {Array.isArray(basemap.thumbnailUrl) &&\r\n                basemap.thumbnailUrl.map((thumbnail, index) => {\r\n                  // eslint-disable-next-line react/no-array-index-key\r\n                  return <img key={index} src={thumbnail} alt={basemap.altText} className={classes.thumbnail} />;\r\n                })}\r\n              <div className={classes.container}>{basemap.name}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  Cast,\r\n  AbstractPluginClass,\r\n  TypePluginOptions,\r\n  TypeIconButtonProps,\r\n  TypeButtonPanel,\r\n  TypeWindow,\r\n  toJsonObject,\r\n  TypePanelProps,\r\n  TypeSchemaObject,\r\n  TypeJsonObject,\r\n} from 'geoview-core';\r\n\r\nimport { BasemapPanel } from './basemap-panel';\r\nimport schema from '../schema.json';\r\nimport defaultConfig from '../default-config-basemap-panel.json';\r\n\r\nconst w = window as TypeWindow;\r\n\r\n/**\r\n * Create a class for the plugin instance\r\n */\r\nclass BasemapPanelPlugin extends AbstractPluginClass {\r\n  // store the created button panel object\r\n  buttonPanel: TypeButtonPanel | null;\r\n\r\n  constructor(id: string, props: TypePluginOptions) {\r\n    super(id, props);\r\n    this.buttonPanel = null;\r\n  }\r\n\r\n  /**\r\n   * Return the package schema\r\n   *\r\n   * @returns {TypeSchemaObject} the package schema\r\n   */\r\n  schema = (): TypeSchemaObject => schema;\r\n\r\n  /**\r\n   * Return the default config for this package\r\n   *\r\n   * @returns {TypeJsonObject} the default config\r\n   */\r\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\r\n\r\n  /**\r\n   * translations object to inject to the viewer translations\r\n   */\r\n  translations = toJsonObject({\r\n    'en-CA': {\r\n      basemapPanel: 'Basemaps',\r\n    },\r\n    'fr-CA': {\r\n      basemapPanel: 'Fond de carte',\r\n    },\r\n  });\r\n\r\n  /**\r\n   * Added function called after the plugin has been initialized\r\n   */\r\n  added = (): void => {\r\n    const { configObj, pluginProps } = this;\r\n\r\n    const { mapId } = pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api, ui } = cgpv;\r\n      const { MapIcon } = ui.elements;\r\n      const { language } = api.map(mapId);\r\n      // button props\r\n      const button: TypeIconButtonProps = {\r\n        id: 'basemapPanelButton',\r\n        tooltip: this.translations[language].basemapPanel as string,\r\n        tooltipPlacement: 'right',\r\n        children: <MapIcon />,\r\n        visible: true,\r\n      };\r\n\r\n      // panel props\r\n      const panel: TypePanelProps = {\r\n        title: this.translations[language].basemapPanel,\r\n        icon: '<i class=\"material-icons\">map</i>',\r\n        width: 200,\r\n        status: configObj?.isOpen as boolean,\r\n      };\r\n\r\n      // create a new button panel on the appbar\r\n      this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\r\n\r\n      // set panel content\r\n      this.buttonPanel?.panel?.changeContent(<BasemapPanel mapId={mapId} config={configObj || {}} />);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function called when the plugin is removed, used for clean up\r\n   */\r\n  removed(): void {\r\n    const { mapId } = this.pluginProps;\r\n\r\n    // access the cgpv object from the window object\r\n    const { cgpv } = w;\r\n\r\n    if (cgpv) {\r\n      // access the api calls\r\n      const { api } = cgpv;\r\n\r\n      if (this.buttonPanel) {\r\n        api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\r\n\r\n        // reset basemaps array\r\n        api.map(mapId).basemap.basemaps = [];\r\n        // reload default basemap\r\n        api.map(mapId).basemap.loadDefaultBasemaps();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default BasemapPanelPlugin;\r\n\r\nw.plugins = w.plugins || {};\r\nw.plugins['basemap-panel'] = Cast<AbstractPluginClass>(BasemapPanelPlugin);\r\n"],"names":["w","window","BasemapPanel","props","mapId","config","cgpv","api","react","ui","Select","elements","useState","useEffect","useStyles","makeStyles","listContainer","marginTop","height","card","boxShadow","transition","borderRadius","marginBottom","width","display","position","thumbnail","opacity","container","background","color","overflow","textOverflow","alignItems","padding","boxSizing","left","bottom","basemapList","setBasemapList","canSwichProjection","classes","projections","supportedProjection","map","mapProps","projection","mapProjection","setMapProjection","setBasemap","id","basemap","addBasemaps","basemaps","basemapIndex","customBasemap","customBasemaps","createCustomBasemap","prevArray","length","basemapOptions","coreBasemaps","createCoreBasemap","fullWidth","labelId","value","onChange","event","target","emit","mapViewProjectionPayload","eventNames","MAP","EVENT_MAP_VIEW_PROJECTION_CHANGE","currentView","getView","currentCenter","getCenter","currentProjection","getProjection","getCode","currentPointResolution","getResolution","newCenter","transformPoints","newProjection","newPointResolution","newResolution","newView","zoom","getZoom","minZoom","getMinZoom","maxZoom","getMaxZoom","center","resolution","setView","label","style","inputLabel","menuItems","key","item","children","className","role","tabIndex","onClick","onKeyPress","thumbnailUrl","src","alt","altText","Array","isArray","index","name","BasemapPanelPlugin","schema","toJsonObject","defaultConfig","basemapPanel","configObj","pluginProps","MapIcon","language","button","tooltip","translations","tooltipPlacement","visible","panel","title","icon","status","isOpen","buttonPanel","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","loadDefaultBasemaps","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}