{"version":3,"file":"corePackages/geoview-layers-panel.js","mappings":"mzBA+BA,IAAMA,EAAIC,OAqjBV,QA9iBA,YAAyE,IAAjDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,mBACrBC,EAASJ,EAATI,KACAC,EAAmBD,EAAnBC,IAAKC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GAEpB,EAAkFF,EAAIG,WAA9EC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,aAAcC,EAApC,EAAoCA,QAASC,EAA7C,EAA6CA,IAAKC,EAAlD,EAAkDA,IAAKC,EAAvD,EAAuDA,YAAaC,EAApE,EAAoEA,UAC5DC,EAAaV,EAAbU,SACR,EAAsFT,EAAGU,SAAjFC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAASC,EAAzB,EAAyBA,UAAWC,EAApC,EAAoCA,OAAQC,EAA5C,EAA4CA,YAAaC,EAAzD,EAAyDA,WAAYC,EAArE,EAAqEA,aAErE,EAAoCR,EAAS,GAA7C,eAAOS,EAAP,KAAmBC,EAAnB,KACA,EAAgCV,EAAS,IAAzC,eAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAkCZ,EAA6B,IAA/D,eAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAkCd,EAA0B,IAA5D,eAAOe,EAAP,KAAkBC,EAAlB,KACA,EAAkChB,EAAS,IAA3C,eAAOiB,EAAP,KAAkBC,EAAlB,KACA,EAAwClB,EAAwD,IAAhG,eAAOmB,EAAP,KAAqBC,GAArB,KAQMC,GANY9B,EAAG+B,YAAW,iBAAO,CACrCC,YAAa,CACXC,WAAY,GACZC,IAAK,MAGOC,GAEVC,GAAa,kBAAMd,IAAcpB,GAKjCmC,GAAe,CACnB,CAACnC,EAAc,wBACf,CAACC,EAAc,wBACf,CAACC,EAAS,WACV,CAACC,EAAK,6BACN,CAACC,EAAK,iCACN,CAACC,EAAa,oBACd,CAACC,EAAW,qBASR8B,GAAc,SAACC,GACnB,OAAQA,GACN,KAAKrC,EACH,MAAO,CAAEsC,IAAK,WAAYC,WAAY,OACxC,KAAKtC,EACH,MAAO,CAAEqC,IAAK,eAAgBC,WAAY,SAC5C,QACE,MAAO,CAAED,IAAK,GAAIC,WAAY,MAS9BC,GAAiB,SAACC,GACtB7C,EAAI8C,MAAMC,MACRC,EAAAA,EAAAA,IAAuBhD,EAAIiD,WAAWC,SAASC,oBAAqBtD,EAAO,CACzE4C,KAAM,SACNW,MAAO,GAAF,OAAKP,EAAL,wBAULQ,GAAkB,SAACC,GACvBtD,EAAI8C,MAAMC,MACRC,EAAAA,EAAAA,IAAuBhD,EAAIiD,WAAWC,SAASC,oBAAqBtD,EAAO,CACzE4C,KAAM,SACNW,MAAO,sBAAF,OAAwBE,EAAxB,eAWLC,GAAgB,SAACD,EAAqBE,EAA0BC,GACpEzD,EAAI8C,MAAMC,MACRC,EAAAA,EAAAA,IAAuBhD,EAAIiD,WAAWC,SAASC,oBAAqBtD,EAAO,CACzE4C,KAAM,SACNW,MAAO,GAAF,OAAKE,EAAL,oDAA4DE,EAA5D,kBAA0EC,EAAcC,KAAK,WAYlGC,GAAa,mCAAG,iGACdH,EAAOxD,EAAI4D,IAAI/D,GAAOgE,WAAWC,SAASC,KAC5CN,EAA0B,GAFV,kBAIAzD,EAAIgE,aAAaC,sBAAsB3C,EAAU,IAJjD,UAIZ4C,EAJY,QAKlBT,EAAgBS,EAAIC,WAAWC,MAAMC,KAClBC,SAASd,GANV,sBAMuB,IAAIe,MAAM,QANjC,OAQI,KADhBC,EAAUN,EAAIC,WAAWC,MAAMA,MAAwBR,KAAI,SAACa,GAAD,MAAY,CAACA,EAAOC,KAAMD,EAAOE,WACvFC,QACT/C,EAAa2C,EAAO,GAAG,IACvBzC,GAAgB,CACd,CACE8C,GAAIL,EAAO,GAAG,OAGb7C,EAAa6C,GAfF,yDAiBN,SAAR,KAAgBjB,GAAc,MAAOC,EAAMC,GAC1CJ,GAAgB,OAlBH,mBAmBX,GAnBW,kCAqBb,GArBa,0DAAH,qDA+BbyB,GAAa,mCAAG,+GAEA9E,EAAIgE,aAAae,sBAAsBzD,GAFvC,OAEZ0D,EAFY,OAOI,KAJhBR,EAAUQ,EAAIC,gBAAgBC,YAA8BtB,KAAI,SAACuB,GAAD,MAAkB,EACtFC,EAAAA,EAAAA,IAAcD,EAAaT,KAAK,SAAoBW,MAAM,KAAK,IAC/DF,EAAaR,MAAM,cAEVC,QACT/C,EAAa2C,EAAO,GAAG,IACvBzC,GAAgB,CACd,CACE8C,GAAIL,EAAO,GAAG,OAGb7C,EAAa6C,GAdF,uDAgBlBnB,GAAgB,OAhBE,mBAiBX,GAjBW,kCAmBb,GAnBa,yDAAH,qDA2BbiC,GAAoB,mCAAG,iGACrBC,EAAO,CAAC,cAAe,SADF,kBAGFC,MAAM,GAAD,OAAIlE,EAAJ,wBAHH,cAGnBmE,EAHmB,gBAINA,EAASC,OAJH,UAInBA,EAJmB,OAKTH,EAAKI,OAAM,SAACC,GAAD,OAASC,OAAON,KAAKG,GAAMpB,SAASsB,MALtC,uBAML,IAAIrB,MAAM,OANL,QAQH,KADhBC,EAAUkB,EAAKI,YAA8BlC,KAAI,SAACuB,GAAD,MAAkB,CAACA,EAAaN,GAAIM,EAAaY,WAC7FnB,QACT/C,EAAa2C,EAAO,GAAG,IACvBzC,GAAgB,CACd,CACE8C,GAAIL,EAAO,GAAG,OAGb7C,EAAa6C,GAfK,yDAiBzBnB,GAAgB,mBAjBS,mBAkBlB,GAlBkB,kCAoBpB,GApBoB,0DAAH,qDA8BpB2C,GAAc,mCAAG,WAAOvD,GAAP,kGAEAzC,EAAIgE,aAAaiC,uBAAuB3E,GAFxC,YAEb4E,EAFa,QAGTC,aAAwB7B,SAAS9B,GAAYC,GAAME,YAH1C,gBAIb,WAAYuD,EAGQ,KAFhB1B,EAAU0B,EAAK1B,OAAyBZ,KAAI,SAACa,GAAD,MAAY,CAACA,EAAOI,GAAIJ,EAAO2B,UAEtExB,QACT/C,EAAa2C,EAAO,GAAG,IACvBzC,GAAgB,CACd,CACEsE,MAAO7B,EAAO,GAAG,OAGhB7C,EAAa6C,IAEpB3C,EAAaqE,EAAKE,MAClBrE,GAAgB,CACd,CACEsE,MAAOH,EAAKrB,OAnBD,4BAwBX,IAAIN,MAAM,OAxBC,gEA2BnBlB,GAAgBb,GAAYC,GAAMC,KA3Bf,mBA4BZ,GA5BY,kCA8Bd,GA9Bc,0DAAH,sDAsCd4D,GAAgB,WAGpB,IAFA,IAAM9C,EAAOxD,EAAI4D,IAAI/D,GAAOgE,WAAWC,SAASC,KAC1CwC,EAAQ,CAAC,MAAO,MAAO,OACpBC,EAAI,EAAGA,EAAID,EAAM3B,OAAQ4B,GAAK,EACrC,IAAKlF,EAASgD,SAASiC,EAAMC,IAE3B,OADAnD,GAAgB,aACT,EAGX,MAAa,cAATG,IACFD,GAAc,YAAaC,EAAM,CAAC,eAC3B,IAULiD,GAAiB,mCAAG,+GAECjB,MAAMlE,GAFP,cAEhBmE,EAFgB,gBAGHA,EAASC,OAHN,UAGhBA,EAHgB,OAIjB,CAAC,oBAAqB,WAAWpB,SAASoB,EAAKjD,MAJ9B,sBAI2C,IAAI8B,MAAM,OAJrD,gEAMtBlB,GAAgB,WANM,mBAOf,GAPe,kCASjB,GATiB,0DAAH,qDA2BjBqD,GAAW,mCAAG,uFACdC,GAAQ,OACMC,IAAdpF,IACFmF,GAAQ,EACR/D,GAAe,iBAEbpB,IAAcjB,EANA,gCAMmBoD,KANnB,OAMKgD,EANL,iBAOdnF,IAAchB,EAPA,iCAOmBsE,KAPnB,OAOK6B,EAPL,kBAQdnF,IAAcf,EARA,kCAQ2B6E,KAR3B,QAQaqB,EARb,kCASTnF,IAAcd,EATL,iBASgBiG,EAAQL,KATxB,2BAUT9E,IAAcpB,EAVL,kCAUiC4F,GAAe5F,GAVhD,QAUmBuG,EAVnB,kCAWTnF,IAAcnB,EAXL,kCAWiC2F,GAAe3F,GAXhD,QAWmBsG,EAXnB,kCAYTnF,IAAclB,EAZL,kCAY4BmG,KAZ5B,QAYcE,EAZd,eAadA,GAAOtF,EAAc,GAbP,4CAAH,qDA+BXwF,GAAiB,WACrB,IAAIF,GAAQ,EACNP,EAAOxE,EACTkF,EAAMxF,EACNyF,EAAUjF,EAEVN,IAAcpB,EAAc0G,EAAM9G,EAAIgE,aAAagD,gBAAgB1F,GAC9DE,IAAcnB,IACrByG,EAAM,GAAH,OAAM9G,EAAIgE,aAAagD,gBAAgB1F,GAAvC,YAAqDQ,EAAyC,GAAGuE,OACpGU,EAAU,IAGM,KAAdnF,IACF+E,GAAQ,EACR/D,GAAeN,KAAe,OAAS,UAEzC,IAAM2E,EAA+B,CACnCpC,GAAI7E,EAAIkH,aACRd,KAAM,CACJe,GAAIf,EACJgB,GAAIhB,GAEN5E,UAAWA,EACXsF,IAAK,CACHK,GAAIL,EACJM,GAAIN,GAENhF,aAAciF,GAEZJ,IACF3G,EAAI4D,IAAI/D,GAAOwH,MAAMC,SAASL,GAC9BnH,GAAmB,KAOjByH,GAAa,WACjBlG,GAAc,SAACmG,GAAD,OAA4BA,EAAiB,MAyEvDC,GAAkB,SAAC3E,GACvBjB,EAAaiB,EAAM4E,OAAOtE,QAU5B,SAASuE,GAAT,GAA+F,QAAzEC,QAAAA,OAAyE,aAAxDC,OAAAA,OAAwD,SAAxCC,EAAwC,EAAxCA,WACrD,OACE,UAAC7G,EAAD,CAAa8G,UAAW/F,GAAQE,YAAhC,WACE,SAAClB,EAAD,CAAQgH,QAAQ,YAAYvF,KAAK,OAAOwF,QAASH,EAAjD,SACGD,EAAS,SAAW,cAErBD,IACA,SAAC5G,EAAD,CAAQgH,QAAQ,YAAYvF,KAAK,OAAOwF,QAASV,GAAjD,qBAQR,OACE,SAACzG,EAAD,CACEM,WAAYA,EACZ8G,YAAY,WACZC,MAAO,CACL,CACEC,UAAW,CACTC,SAAU,aAEZC,YAAa,CACXD,UACE,iCACE,SAACtH,EAAD,CAAWwH,GAAI,CAAEC,MAAO,QAAUC,MAAM,MAAMT,QAAQ,WAAW5E,MAAO9B,EAAUoH,SAvG5E,SAAC5F,GACnBvB,EAAYuB,EAAM4E,OAAOtE,OACzB3B,EAAa,IACbE,EAAa,IACbE,EAAa,IACbE,GAAgB,QAmGJ,mBACA,SAAC4F,GAAD,CAAYC,SAAO,EAACE,WAnMd,WAClB,IAAInB,GAAQ,EACY,KAApBrF,EAASqH,SACXhC,GAAQ,EACR/D,GAAe,QAEb+D,GAAOtF,EAAc,WAkMrB,CACE+G,UAAW,CACTC,SAAU,iBAEZC,YAAa,CACXD,UACE,iCACE,SAACxH,EAAD,CACE+H,WAAS,EACTC,QAAQ,qBACRzF,MAAO5B,EACPkH,SA5GS,SAAC5F,GACxBrB,EAAaqB,EAAM4E,OAAOtE,OAC1BzB,EAAa,IACbE,EAAa,IACbE,GAAgB,KAyGF0G,MAAM,eACNK,WAAY,CACVjE,GAAI,sBAENkE,UAAWxG,GAAaqB,KAAI,+BAAER,EAAF,WAAqB,CAC/CwC,IAAKxC,EACL4F,KAAM,CACJ5F,MAAAA,EACAiF,SAJwB,aAQ9B,SAACV,GAAD,CAAYG,WAAYpB,UAKhC,CACE0B,UAAW,CACTC,SAAU,mBAEZC,YAAa,CACXD,UACE,gCACwB,IAArB3G,EAAUkD,QAAwC,IAAxB9C,EAAa8C,SACtC,SAAC7D,EAAD,CAAW0H,MAAM,OAAOT,QAAQ,WAAW5E,MAAOxB,EAAW8G,SAAUjB,KAEnD,IAArB/F,EAAUkD,QAAgB9C,EAAa8C,OAAS,IAAK,SAAC1D,EAAD,UAAaU,IAClEF,EAAUkD,OAAS,IAClB,SAACzD,EAAD,CACEyH,WAAS,EACTK,SAAU3G,KACV4G,sBAAoB,EACpBC,kBAAmB7G,KACnBuC,GAAG,sBACHuE,QAAS1H,EACT2H,eAAgB,SAACC,GAAD,gBAAeA,EAAO,GAAtB,aAA6BA,EAAO,GAApC,MAChBC,aAAc,SAACC,EAAOF,GAAR,OAAmB,uBAAUE,GAAV,aAAkBF,EAAO,OAW1DZ,SAhJQ,SAAC5F,EAAc2G,GACnCnH,MACFP,GACE0H,EAAS7F,KAAI,SAAC8F,GACZ,OAAIlI,IAAcpB,EACT,CACLiG,MAAOsD,SAASD,EAAE,GAAI,KAInB,CACL7E,GAAI6E,EAAE,QAIZ7H,EAAa4H,EAAS7F,KAAI,SAAC8F,GAAD,OAAOA,EAAE,MAAIhG,KAAK,SAG1C3B,GADEP,IAAcpB,EACA,CACd,CACEiG,MAAOsD,SAASF,EAAS,GAAI,MAIjB,CACd,CACE5E,GAAI4E,EAAS,MAInB5H,EAAa4H,EAAS,MAmHRG,YAAa,SAACC,GAAD,OAAY,SAAC9I,EAAD,OAAe8I,GAAf,IAAuBpB,MAAM,sBAG1D,mBACA,SAACd,GAAD,CAAYE,QAASvF,KAAcwF,WAAYxF,KA1OzC,WAClB,IAAIqE,GAAQ,EACgB,IAAxB7E,EAAa8C,SACf+B,GAAQ,EACR/D,GAAe,UAEb+D,GAAOtF,EAAc,IAoO+DwF,UAKpFvE,KACI,CACE8F,UAAW,CACTC,SAAU,cAEZC,YAAa,CACXD,UACE,iCACE,SAACtH,EAAD,CAAWwH,GAAI,CAAEC,MAAO,QAAUC,MAAM,OAAOT,QAAQ,WAAW5E,MAAOxB,EAAW8G,SAAUjB,MAC9F,mBACA,SAACE,GAAD,CAAYE,QAAM,EAACC,WAAYjB,UAKvC,S,mlBCvjBZ,IAAMlH,EAAIC,OAsZV,QA/YA,SAAoB4J,GAClB,IAAQ3J,EAA4B2J,EAA5B3J,MAAO2E,EAAqBgF,EAArBhF,OAAQsF,EAAaN,EAAbM,SAEf/J,EAASJ,EAATI,KACAG,EAAmBH,EAAnBG,GAAID,EAAeF,EAAfE,MAAOD,EAAQD,EAARC,IACXW,EAAwBV,EAAxBU,SAAUoJ,EAAc9J,EAAd8J,UAElB,EAA0CpJ,EAAiB,IAA3D,eAAOqJ,EAAP,KAAsBC,EAAtB,KACA,EAAsCtJ,EAAuC,IAA7E,eAAOuJ,EAAP,KAAoBC,EAApB,KACA,EAAsCxJ,EAAmC,IAAzE,eAAOyJ,EAAP,KAAoBC,EAApB,KACA,EAAkC1J,EAAS,IAA3C,eAAO2J,EAAP,KAAkBC,EAAlB,KACA,EAAwC5J,EAAiC,IAAzE,eAAO6J,EAAP,KAAqBC,EAArB,KACA,EAA8C9J,EAAkC,IAAhF,eAAO+J,EAAP,KAAwBC,EAAxB,KACA,EAAoDhK,EAAiC,IAArF,eAAOiK,EAAP,KAA2BC,EAA3B,KAEA,EAA8C3K,EAAGU,SAAzCI,EAAR,EAAQA,OAAQ8J,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,SAE3BC,GAA+B7F,EAAAA,EAAAA,IAAa,CAChD,QAAS,CACP8F,OAAQ,gBACRC,KAAM,gBACNC,OAAQ,eACRC,QAAS,iBACTC,WAAY,qBAEd,QAAS,CACPJ,OAAQ,qBACRC,KAAM,qBACNC,OAAQ,sBACRC,QAAS,oBACTC,WAAY,4BAIVjJ,GAAYnC,EAAG+B,YAAW,iBAAO,CACrCsJ,gBAAiB,CACfC,SAAU,SACVC,UAAW,OACXjD,MAAO,QAETkD,UAAW,CACTC,QAAS,OACTC,WAAY,SACZC,eAAgB,gBAChBC,OAAQ,QACRC,QAAS,WACTC,UAAW,cACX,UAAW,CACTC,OAAQ,UACRC,gBAAiB,WAEnBC,OAAQ,IACRC,OAAQ,OACR5D,MAAO,QAET6D,gBAAiB,CACfC,SAAU,OACVC,WAAY,QAEdC,wBAAyB,CACvBb,QAAS,OACTC,WAAY,SACZpD,MAAO,OACPiE,OAAQ,QAEVC,cAAe,CACbJ,SAAU,OACVK,WAAY,SACZC,aAAc,WACdpB,SAAU,SACVqB,WAAY,OACZlB,QAAS,OACTC,WAAY,SACZxJ,IAAK,GAEP0K,UAAW,CACTnB,QAAS,OACTE,eAAgB,WAChBD,WAAY,WACZxJ,IAAK,IAEP2K,gBAAiB,CACfN,OAAQ,GACRO,UAAW,GACXxE,MAAO,GACPyE,SAAU,GACV,UAAW,CACTC,UAAW,WAGfC,OAAQ,CACN3E,MAAO,OACP4E,YAAa,GACbC,aAAc,IAEhBC,oBAAqB,CACnB3B,QAAS,OACTE,eAAgB,qBA8BpB9B,GAAU,WACR,IAAMwD,EAAiB1H,OAAO2H,OAAOhJ,GAAQiJ,QAAO,SAACC,EAAMC,GAAP,SAAC,KAAqBD,GAAtB,cAA6BC,EAAK9I,GAAK,OAAO,IAClGsF,GAAe,SAACyD,GAAD,SAAC,KAAgBL,GAAmBK,MAxBnD/H,OAAO2H,OAAOhJ,GAAQqJ,QAAtB,mCAA8B,WAAOxG,GAAP,oFACxByG,EAAAA,EAAAA,IAAczG,GADU,gCAEJA,EAAM0G,mBAFF,OAEpBC,EAFoB,OAGpB5H,EAAOiB,EAAMP,IAAIxC,SAAS,cAAgB+C,EAAMjB,KAAO,GACvD6H,EAAS,CAAC,CAAE7H,KAAAA,EAAM4H,QAAAA,IACxB7D,GAAe,SAACyD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBvG,EAAMxC,GAAKoJ,OALzB,4BAMjBC,EAAAA,EAAAA,IAAsB7G,MAAU8G,EAAAA,EAAAA,IAAsB9G,GANrC,kCAOLA,EAAM+G,gBAPD,QAOpBH,EAPoB,OAQpBI,EAAcC,MAAMC,QAAQN,GAAUA,EAAS,CAACA,GACtD9D,GAAe,SAACyD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBvG,EAAMxC,GAAKwJ,OATzB,4CAA9B,uDA2BA,IAAMG,EAAgB3I,OAAO2H,OAAOhJ,GAAQiJ,QAAO,SAACC,EAAMC,GAAP,SAAC,KAAqBD,GAAtB,cAA6BC,EAAK9I,GAAK,OAAO,IACjGwF,GAAe,SAACuD,GAAD,SAAC,KAAgBY,GAAkBZ,MAXlD/H,OAAO2H,OAAOhJ,GAAQqJ,QAAtB,mCAA8B,WAAOxG,GAAP,uFACPA,EAAMoH,YADC,OACtBvD,EADsB,OAE5Bb,GAAe,SAACuD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBvG,EAAMxC,GAAKqG,OAFvB,2CAA9B,uDAcA,IAAMwD,EAAiB7I,OAAO2H,OAAOhJ,GAAQiJ,QAAO,SAACC,EAAMC,GAAP,SAAC,KAAqBD,GAAtB,cAA6BC,EAAK9I,GAAK,QAAQ,IACnG4F,GAAgB,SAACmD,GAAD,SAAC,KAAgBc,GAAmBd,MAEpD,IAAMe,EAAoB9I,OAAO2H,OAAOhJ,GAAQiJ,QAAO,SAACC,EAAMC,GAAP,SAAC,KAAqBD,GAAtB,cAA6BC,EAAK9I,IAAK,MAAS,IACvG8F,GAAmB,SAACiD,GAAD,SAAC,KAAgBe,GAAsBf,MAE1D,IAAMgB,EAAuB/I,OAAO2H,OAAOhJ,GAAQiJ,QAAO,SAACC,EAAMC,GAAP,SAAC,KAAqBD,GAAtB,cAA6BC,EAAK9I,GAAK8I,EAAK5G,YAAY,IAClH8D,GAAsB,SAAC+C,GAAD,SAAC,KAAgBgB,GAAyBhB,QAE/D,CAACpJ,IAEJ,IAAMxC,GAAUK,KA2BVwM,GAAoB,SAAC3D,GAAsD,IAA9B4D,EAA8B,uDAAnB,IACtDtG,EAAQ0C,EAAO6D,UAAY7D,EAAO8D,UAClCC,EAAU,GAChBA,EAAQC,KAAKhE,EAAOiE,gBACpB,IAAK,IAAI3I,EAAI,EAAGA,GAAKsI,EAAUtI,GAAK,EAAG,CACrC,IAAM4I,EAAe5G,GAAShC,GAAKsI,EAAW,IACxCO,EAAMnE,EAAO8D,UAAYI,EAC/BH,EAAQC,KAAK,CAAEI,IAAKpE,EAAOqE,WAAYF,IAAAA,IAEzCJ,EAAQC,KAAKhE,EAAOsE,gBACpBP,EAAQC,KAAKhE,EAAOuE,gBACpB,IAAK,IAAIjJ,EAAI,EAAGA,GAAKsI,EAAUtI,GAAK,EAAG,CACrC,IAAM4I,EAAe5G,GAAShC,GAAKsI,EAAW,IACxCO,EAAMnE,EAAO6D,UAAYK,EAC/BH,EAAQC,KAAK,CAAEI,IAAKpE,EAAOwE,WAAYL,IAAAA,IAGzC,OADAJ,EAAQC,KAAKhE,EAAOyE,gBACbC,EAAEC,QAAQZ,EAAS,CAAEpK,GAAI7E,EAAIkH,aAAc4I,MAAO,SA4F3D,OACE,gBAAK/H,UAAW/F,GAAQuJ,gBAAxB,SACG1F,OAAO2H,OAAOhJ,GAAQZ,KAAI,SAACyD,GAAD,OACzB,4BACE,mBAAQ5E,KAAK,SAASsF,UAAW/F,GAAQ0J,UAAWzD,QAAS,kBApIpD7E,EAoIkEiE,EAAMxC,QAlIvFoF,EADiB7G,IAAU4G,EAAgB5G,EAAQ,IADrC,IAACA,GAoIT,UACE,gBAAK2E,UAAW/F,GAAQwK,wBAAxB,UACE,gBAAKzE,UAAW/F,GAAQ0K,cAAe3G,MAAOsB,EAAMjB,KAApD,SACGiB,EAAMjB,WAIZ4D,IAAkB3C,EAAMxC,KACvB,iCACE,iBAAKkD,UAAW/F,GAAQ8K,UAAxB,WACE,SAAC9L,EAAD,CACE+G,UAAW/F,GAAQ+K,gBACnBgD,QAAS9E,EAAanB,GAAUqB,KAChC6E,iBAAiB,MACjBhI,QAAQ,YACRvF,KAAK,OACLwN,KAAK,wCACLhI,QAAS,kBA3IV,SAACZ,GAAD,OAAmCrH,EAAI4D,IAAI/D,GAAOqQ,UAAU9F,EAAY/C,EAAMxC,KA2I9DsL,CAAO9I,OAExB,SAACrG,EAAD,CACE+G,UAAW/F,GAAQ+K,gBACnBgD,QAAS9E,EAAanB,GAAUoB,OAChC8E,iBAAiB,MACjBhI,QAAQ,YACRvF,KAAK,OACLwN,KAAK,0CACLhI,QAAS,kBAlHR,SAACZ,GAChB,IAAM+I,EAAOvB,GAAkBzE,EAAY/C,EAAMxC,KACjCwL,KAAKC,UAAUF,EAAKG,eACpBF,KAAKC,UAAUhG,EAAUiG,cAEvCjG,EAAUc,SACVb,EAAaqF,EAAEC,QAAQ,OAEvBvF,EAAUc,SACVgF,EAAKI,MAAMxQ,EAAI4D,IAAI/D,GAAO+D,KAC1B2G,EAAa6F,IAwGcK,CAASpJ,OAE1B,SAACrG,EAAD,CACE+G,UAAW/F,GAAQ+K,gBACnBgD,QAAS9E,EAAanB,GAAUsB,OAChC4E,iBAAiB,MACjBhI,QAAQ,YACRvF,KAAK,OACLwN,KAAK,uCACLhI,QAAS,kBAxGR,SAACZ,GAChB,IAAM+I,EAAOvB,GAAkBzE,EAAY/C,EAAMxC,KACjCwL,KAAKC,UAAUF,EAAKG,eACpBF,KAAKC,UAAUhG,EAAUiG,eAEvCjG,EAAUc,SACVb,EAAaqF,EAAEC,QAAQ,MAEzB7P,EAAI4D,IAAI/D,GAAOwH,MAAMqJ,YAAYrJ,GAgGJsJ,CAAStJ,UAG5B,iBAAKU,UAAW/F,GAAQ8K,UAAxB,WACE,SAAC/B,EAAD,CAAShF,MAAOkF,EAAanB,GAAUuB,QAAvC,UACE,cAAGtD,UAAU,iBAAb,yBAEF,gBAAKA,UAAW/F,GAAQmL,OAAxB,UACE,SAACrC,EAAD,CACEjG,GAAI7E,EAAIkH,aACR0J,IAAK,EACLC,IAAK,IACLC,KAAK,QACL1N,MAAOoH,EAAanD,EAAMxC,IAC1BkM,kBAAkB,OAClBC,eAAgB,SAAC5N,GAAD,OAtGX,SAACA,EAAe6N,GACrCxG,GAAgB,SAACmD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,GAAKzB,OACnD,IAAMiI,EAAUX,EAAgBuG,EAAKpM,IAAMzB,EAAQ,IAAM,EACzD6N,EAAKC,WAAW7F,GAmG2B8F,CAAe/N,EAAiBiE,SAG/D,SAAC0D,EAAD,CAAShF,MAAOkF,EAAanB,GAAUwB,WAAvC,UACE,SAACN,EAAD,CAAUoG,QAAS1G,EAAgBrD,EAAMxC,IAAK6D,SAAU,SAAC2I,GAAD,OA9F7C,SAACjO,EAAgB6N,GAC1CtG,GAAmB,SAACiD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,GAAKzB,OACtD,IAAMiI,EAAUjI,EAAQoH,EAAayG,EAAKpM,IAAM,IAAM,EACtDoM,EAAKC,WAAW7F,GACZjI,GAAS6N,EAAKK,aAChBzG,GAAsB,SAAC+C,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,GAAKoM,EAAKlK,aAC9DkK,EAAKK,WAAWL,EAAKlK,WAElB3D,GAAS6N,EAAKK,aACjBzG,GAAsB,SAAC+C,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,GAAK,QACzDoM,EAAKK,WAAW,KAoF2DC,CAAmBF,EAAE3J,OAAO0J,QAAS/J,WAGtG6C,EAAY7C,EAAMxC,IAAsBjB,KAAI,SAAC4N,EAAUnL,GAAX,uBAC5C,2BACGmL,EAAUvD,SACT,iBAAKlG,UAAW/F,GAAQsL,oBAAxB,WACE,gBAAKvF,UAAW/F,GAAQ0K,cAAe3G,MAAOyL,EAAS5P,UAAvD,SACG4P,EAAS5P,aAEZ,SAACmJ,EAAD,CAAShF,MAAOkF,EAAanB,GAAUwB,WAAvC,UACE,SAACN,EAAD,CACEoG,QAASxG,EAAmBvD,EAAMxC,IAAIP,SAASkN,EAASC,SACxD/I,SAAU,SAAC2I,GAAD,OAtFHjO,EAsFgCiO,EAAE3J,OAAO0J,QAtFzBH,EAsFkC5J,EAtFJxC,EAsFW2M,EAASC,QArFzFC,EAAa9G,EAAmBqG,EAAKpM,IACrCkC,EAAU3D,GAAQ,OAAI,IAAIuO,IAAJ,kBAAYD,GAAZ,CAAwB7M,MAAQ6M,EAAWE,QAAO,SAAClI,GAAD,OAAOA,IAAM7E,KACjE,IAAtB6M,EAAW9M,SACb+F,GAAmB,SAACiD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,IAAK,OACtDoM,EAAKC,WAAW1G,EAAayG,EAAKpM,IAAM,MAEnB,IAAnBkC,EAAQnC,SACV+F,GAAmB,SAACiD,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,IAAK,OACtDoM,EAAKC,WAAW,IAElBrG,GAAsB,SAAC+C,GAAD,SAAC,KAAgBA,GAAjB,cAAyBqD,EAAKpM,GAAKkC,YACrDkK,EAAKK,YAAYL,EAAKK,WAAWvK,IAZT,IAAC3D,EAAgB6N,EAA8BpM,EACrE6M,EACA3K,UAyF6D,YAApD,UAACyK,EAASK,mBAAV,aAAC,EAAsBC,SAASrP,QAAhC,UAAgE+O,EAASK,mBAAzE,aAAgE,EAAsBC,SAASC,OAAOC,aACrG,iBAAKjK,UAAW/F,GAAQ0K,cAAxB,WACE,gBACEuF,IAAI,eACJC,IAAG,yBAAUV,EAASK,mBAAnB,aAAU,EAAsBC,SAASC,OAAOI,YAAhD,6BAAsEX,EAASK,mBAA/E,aAAsE,EAAsBC,SAASC,OAAOC,cAEhH,UAAAR,EAASK,mBAAT,eAAsBC,SAASrJ,QAAS+I,EAASpL,QAGb,iBAAxC,UAAAoL,EAASK,mBAAT,eAAsBC,SAASrP,OAC9B+O,EAASK,YAAYC,SAASM,iBAAiB,GAAGL,OAAOC,WACxDR,EAASK,YAAYC,SAASM,iBAAmCxO,KAAI,SAACyO,EAAa7L,GAAd,OACpE,iBAAauB,UAAW/F,GAAQ0K,cAAhC,WACE,gBAAKuF,IAAI,eAAeC,IAAG,eAAUG,EAAYN,OAAOI,YAA7B,mBAAmDE,EAAYN,OAAOC,aAChGK,EAAY5J,QAFLjC,MAKbgL,EAASvD,QACPuD,EAASvD,OAAyBrK,KAAI,SAACyO,EAAa7L,GAAd,OACrC,iBAAauB,UAAW/F,GAAQ0K,cAAhC,WACE,gBAAKuF,IAAI,eAAeC,IAAG,eAAUG,EAAYF,YAAtB,mBAA4CE,EAAYL,aAClFK,EAAY5J,OAAS+I,EAAS5P,YAFvB4E,MAKbgL,EAASxD,UACR,iBAAKjG,UAAW/F,GAAQ0K,cAAxB,WACE,gBAAKuF,IAAI,eAAeC,IAAKV,EAASxD,UACrCwD,EAASpL,UAzCNC,WA3DRgB,EAAMxC,U,qkBCvTxB,IAAMlF,EAAIC,OAsGV,QA9FA,SAAsB4J,GACpB,IAAQ3J,EAAuB2J,EAAvB3J,MAAOyS,EAAgB9I,EAAhB8I,YAEPvS,EAASJ,EAATI,KACAC,EAAmBD,EAAnBC,IAAKC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACZS,EAAwBV,EAAxBU,SAAUoJ,EAAc9J,EAAd8J,UAClB,EAA8CpJ,GAAS,GAAvD,eAAO4R,EAAP,KAAwBzS,EAAxB,KACA,EAAkCa,EAAS,IAA3C,eAAO6R,EAAP,KAAkBC,EAAlB,KACQzR,EAAWd,EAAGU,SAAdI,OAEA8I,EAAa9J,EAAI4D,IAAI/D,GAArBiK,SAEFmB,GAA+B7F,EAAAA,EAAAA,IAAa,CAChD,QAAS,CACPkC,SAAU,aAEZ,QAAS,CACPA,SAAU,oBAiBRtF,EAbY9B,EAAG+B,YAAW,iBAAO,CACrCyQ,cAAe,CACb/G,QAAS,OACTgH,cAAe,OAEjBC,eAAgB,CACdpK,MAAO,GACPyE,SAAU,GACV,UAAW,CACTC,UAAW,cAID7K,GAuChB,OAnCA0H,GAAU,WA4BR,OA3BA0I,GAAa,uBAAYzS,EAAI4D,IAAI/D,GAAOwH,MAAM7C,WAE9CxE,EAAI8C,MAAM+P,GACR7S,EAAIiD,WAAW6P,MAAMC,mBACrB,kBACEN,GAAa,uBACRzS,EAAI4D,IAAI/D,GAAOwH,MAAM7C,aAE5B3E,GAEFG,EAAI8C,MAAM+P,GACR7S,EAAIiD,WAAW6P,MAAME,oBACrB,kBACEP,GAAa,uBACRzS,EAAI4D,IAAI/D,GAAOwH,MAAM7C,aAE5B3E,GAEFG,EAAI8C,MAAM+P,GACR7S,EAAIiD,WAAWgQ,MAAMC,mBACrB,WACEpT,GAAmB,KAErBD,EACAyS,EAAYzN,IAGP,WACL7E,EAAI8C,MAAMqQ,IAAInT,EAAIiD,WAAW6P,MAAMC,kBAAmBlT,GACtDG,EAAI8C,MAAMqQ,IAAInT,EAAIiD,WAAW6P,MAAME,mBAAoBnT,GACvDG,EAAI8C,MAAMqQ,IAAInT,EAAIiD,WAAWgQ,MAAMC,kBAAmBrT,EAAOyS,EAAYzN,OAE1E,CAAC7E,EAAKsS,EAAYzN,GAAIhF,KAGvB,iCACE,gBAAKkI,UAAW/F,EAAQ0Q,cAAxB,UACE,SAAC1R,EAAD,CACE+G,UAAW/F,EAAQ4Q,eACnB7C,QAAS9E,EAAanB,GAAUxC,SAChC0I,iBAAiB,QACjBhI,QAAQ,YACRvF,KAAK,OACLwN,KAAK,oCACLhI,QA/CQ,kBAAMnI,GAAmB,SAAC8N,GAAD,OAAqBA,UAkDzD2E,IAAmB,SAAC,EAAD,CAAc1S,MAAOA,EAAOC,mBAAoBA,KACpE,gBAAKsT,MAAO,CAAEzH,QAAS4G,EAAkB,OAAS,WAAlD,UACE,SAAC,EAAD,CAAY1S,MAAOA,EAAO2E,OAAQgO,EAAW1I,SAAUA,U,moECpF/D,IAAMnK,EAAIC,OAKJyT,EAAAA,SAAAA,I,uBAIJ,WAAYxO,EAAY2E,GAA0B,4BAChD,cAAM3E,EAAI2E,IADsC,4BAUzC,kBAAwB8J,MAViB,mCAiBlC,kBAAsBlO,EAAAA,EAAAA,IAAamO,OAjBD,kCAsBnBnO,EAAAA,EAAAA,IAAa,CAC1C,QAAS,CACPoO,YAAa,UAEf,QAAS,CACPA,YAAa,eA3BiC,2BAkC1C,WAAY,YAWdC,EAVI5T,EAAU,EAAK6T,YAAf7T,MAGAE,EAASJ,EAATI,KAGAC,EAAYD,EAAZC,IACA2T,EADY5T,EAAPG,GACqBU,SAA1B+S,mBACA7J,EAAa9J,EAAI4D,IAAI/D,GAArBiK,SAIR2J,EAAW,UAAG,EAAKG,iBAAR,iBAAG,EAAgBC,cAAnB,aAAG,EAAwBC,MAGtC,IAAMC,EAA8B,CAClClP,GAAI,oBACJkL,QAAS,EAAK9E,aAAanB,GAAU0J,YACrCxD,iBAAkB,QAClB3H,UAAU,SAACsL,EAAD,IACVK,SAAS,GAILC,EAAwB,CAC5BlO,MAAO,EAAKkF,aAAanB,GAAU0J,YACnCvD,KAAM,uCACNzH,MAAO,IACP0L,OAAQT,GAIV,EAAKnB,YAActS,EAAI4D,IAAI/D,GAAOsU,cAAcC,kBAAkBL,EAAQE,EAAO,MAGjF,YAAK3B,mBAAL,mBAAkB2B,aAAlB,SAAyBI,eAAc,SAAC,EAAD,CAAc/B,YAAa,EAAKA,YAAazS,MAAOA,QApE3F,EAAKyS,YAAc,KAF6B,E,sCA4ElD,WACE,IAAQzS,EAAUyU,KAAKZ,YAAf7T,MAMAG,EAHSL,EAATI,KAGAC,IAEJsU,KAAKhC,aACPtS,EAAI4D,IAAI/D,GAAOsU,cAAcI,kBAAkBD,KAAKhC,YAAYzN,Q,EA1FhEwO,CAA0BmB,EAAAA,IAiGhC7U,EAAE8U,QAAU9U,EAAE8U,SAAW,GACzB9U,EAAE8U,QAAQ,iBAAkBC,EAAAA,EAAAA,IAA0BrB,K","sources":["webpack://geoview-core/../geoview-layers-panel/src/layer-stepper.tsx","webpack://geoview-core/../geoview-layers-panel/src/layers-list.tsx","webpack://geoview-core/../geoview-layers-panel/src/panel-content.tsx","webpack://geoview-core/../geoview-layers-panel/src/index.tsx"],"sourcesContent":["/* eslint-disable react/require-default-props */\nimport {\n  TypeWindow,\n  toJsonObject,\n  TypeJsonArray,\n  TypeDynamicLayerEntry,\n  TypeOgcLayerEntry,\n  TypeLayerConfig,\n  TypeWebLayers,\n  TypeSelectChangeEvent,\n  snackbarMessagePayload,\n} from 'geoview-core';\n\ntype Event = { target: { value: string } };\n\ninterface Props {\n  mapId: string;\n  setAddLayerVisible: (isVisible: boolean) => void;\n}\n\ninterface ButtonProps {\n  isFirst?: boolean;\n  isLast?: boolean;\n  handleNext: () => void;\n}\n\ntype EsriOptions = {\n  err: string;\n  capability: string;\n};\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction LayerStepper({ mapId, setAddLayerVisible }: Props): JSX.Element {\n  const { cgpv } = w;\n  const { api, react, ui } = cgpv;\n\n  const { ESRI_DYNAMIC, ESRI_FEATURE, GEOJSON, WMS, WFS, OGC_FEATURE, XYZ_TILES } = api.layerTypes;\n  const { useState } = react;\n  const { Select, Stepper, TextField, Button, ButtonGroup, Typography, Autocomplete } = ui.elements;\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [layerURL, setLayerURL] = useState('');\n  const [layerType, setLayerType] = useState<TypeWebLayers | ''>('');\n  const [layerList, setLayerList] = useState<TypeJsonArray[]>([]);\n  const [layerName, setLayerName] = useState('');\n  const [layerEntries, setLayerEntries] = useState<(TypeDynamicLayerEntry | TypeOgcLayerEntry)[]>([]);\n\n  const useStyles = ui.makeStyles(() => ({\n    buttonGroup: {\n      paddingTop: 12,\n      gap: 6,\n    },\n  }));\n  const classes = useStyles();\n\n  const isMultiple = () => layerType === ESRI_DYNAMIC;\n\n  /**\n   * List of layer types and labels\n   */\n  const layerOptions = [\n    [ESRI_DYNAMIC, 'ESRI Dynamic Service'],\n    [ESRI_FEATURE, 'ESRI Feature Service'],\n    [GEOJSON, 'GeoJSON'],\n    [WMS, 'OGC Web Map Service (WMS)'],\n    [WFS, 'OGC Web Feature Service (WFS)'],\n    [OGC_FEATURE, 'OGC API Features'],\n    [XYZ_TILES, 'XYZ Raster Tiles'],\n  ];\n\n  /**\n   * Returns the appropriate error config for ESRI layer types\n   *\n   * @param type one of esriDynamic or esriFeature\n   * @returns {EsriOptions} an error configuration object for populating dialogues\n   */\n  const esriOptions = (type: string): EsriOptions => {\n    switch (type) {\n      case ESRI_DYNAMIC:\n        return { err: 'ESRI Map', capability: 'Map' };\n      case ESRI_FEATURE:\n        return { err: 'ESRI Feature', capability: 'Query' };\n      default:\n        return { err: '', capability: '' };\n    }\n  };\n\n  /**\n   * Emits an error dialogue when a text field is empty\n   *\n   * @param textField label for the TextField input that cannot be empty\n   */\n  const emitErrorEmpty = (textField: string) => {\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `${textField} cannot be empty`,\n      })\n    );\n  };\n\n  /**\n   * Emits an error when the URL does not support the selected service type\n   *\n   * @param serviceName type of service provided by the URL\n   */\n  const emitErrorServer = (serviceName: string) => {\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `URL is not a valid ${serviceName} Server`,\n      })\n    );\n  };\n\n  /**\n   * Emits an error when a service does not support the current map projection\n   *\n   * @param serviceName type of service provided by the URL\n   * @param proj current map projection\n   */\n  const emitErrorProj = (serviceName: string, proj: string | undefined, supportedProj: TypeJsonArray | string[]) => {\n    api.event.emit(\n      snackbarMessagePayload(api.eventNames.SNACKBAR.EVENT_SNACKBAR_OPEN, mapId, {\n        type: 'string',\n        value: `${serviceName} does not support current map projection ${proj}, only ${supportedProj.join(', ')}`,\n      })\n    );\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WMS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wmsValidation = async (): Promise<boolean> => {\n    const proj = api.map(mapId).projection.getCRS().code!;\n    let supportedProj: string[] = [];\n    try {\n      const wms = await api.geoUtilities.getWMSServiceMetadata(layerURL, '');\n      supportedProj = wms.Capability.Layer.CRS as string[];\n      if (!supportedProj.includes(proj)) throw new Error('proj');\n      const layers = (wms.Capability.Layer.Layer as TypeJsonArray).map((aLayer) => [aLayer.Name, aLayer.Title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            id: layers[0][0] as string,\n          },\n        ]);\n      } else setLayerList(layers);\n    } catch (err) {\n      if (err === 'proj') emitErrorProj('WMS', proj, supportedProj);\n      else emitErrorServer('WMS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid WFS,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const wfsValidation = async (): Promise<boolean> => {\n    try {\n      const wfs = await api.geoUtilities.getWFSServiceMetadata(layerURL);\n      const layers = (wfs.FeatureTypeList.FeatureType as TypeJsonArray).map((aFeatureType) => [\n        toJsonObject((aFeatureType.Name['#text'] as string).split(':')[1]),\n        aFeatureType.Title['#text'],\n      ]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            id: layers[0][0] as string,\n          },\n        ]);\n      } else setLayerList(layers);\n    } catch (err) {\n      emitErrorServer('WFS');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid OGC API.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const ogcFeatureValidation = async (): Promise<boolean> => {\n    const keys = ['collections', 'links'];\n    try {\n      const response = await fetch(`${layerURL}/collections?f=json`);\n      const json = await response.json();\n      const isValid = keys.every((key) => Object.keys(json).includes(key));\n      if (!isValid) throw new Error('err');\n      const layers = (json.collections as TypeJsonArray).map((aFeatureType) => [aFeatureType.id, aFeatureType.title]);\n      if (layers.length === 1) {\n        setLayerName(layers[0][1] as string);\n        setLayerEntries([\n          {\n            id: layers[0][0] as string,\n          },\n        ]);\n      } else setLayerList(layers);\n    } catch (err) {\n      emitErrorServer('OGC API Feature');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid ESRI Server,\n   * and add either Name and Entry directly to state if a single layer,\n   * or a list of Names / Entries if multiple layer options exist.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const esriValidation = async (type: string): Promise<boolean> => {\n    try {\n      const esri = await api.geoUtilities.getESRIServiceMetadata(layerURL);\n      if ((esri.capabilities as string).includes(esriOptions(type).capability)) {\n        if ('layers' in esri) {\n          const layers = (esri.layers as TypeJsonArray).map((aLayer) => [aLayer.id, aLayer.name]);\n\n          if (layers.length === 1) {\n            setLayerName(layers[0][1] as string);\n            setLayerEntries([\n              {\n                index: layers[0][0] as number,\n              },\n            ]);\n          } else setLayerList(layers);\n        } else {\n          setLayerName(esri.name as string);\n          setLayerEntries([\n            {\n              index: esri.id as number,\n            },\n          ]);\n        }\n      } else {\n        throw new Error('err');\n      }\n    } catch (err) {\n      emitErrorServer(esriOptions(type).err);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid XYZ Server.\n   *\n   * @returns {boolean} True if layer passes validation\n   */\n  const xyzValidation = (): boolean => {\n    const proj = api.map(mapId).projection.getCRS().code;\n    const tiles = ['{x}', '{y}', '{z}'];\n    for (let i = 0; i < tiles.length; i += 1) {\n      if (!layerURL.includes(tiles[i])) {\n        emitErrorServer('XYZ Tile');\n        return false;\n      }\n    }\n    if (proj !== 'EPSG:3857') {\n      emitErrorProj('XYZ Tiles', proj, ['EPSG:3857']);\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Using the layerURL state object, check whether URL is a valid GeoJSON.\n   *\n   * @returns {Promise<boolean>} True if layer passes validation\n   */\n  const geoJSONValidation = async (): Promise<boolean> => {\n    try {\n      const response = await fetch(layerURL);\n      const json = await response.json();\n      if (!['FeatureCollection', 'Feature'].includes(json.type)) throw new Error('err');\n    } catch (err) {\n      emitErrorServer('GeoJSON');\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep1 = () => {\n    let valid = true;\n    if (layerURL.trim() === '') {\n      valid = false;\n      emitErrorEmpty('URL');\n    }\n    if (valid) setActiveStep(1);\n  };\n\n  /**\n   * Handle the behavior of the 'Continue' button in the Stepper UI\n   */\n  const handleStep2 = async () => {\n    let valid = true;\n    if (layerType === undefined) {\n      valid = false;\n      emitErrorEmpty('Service Type');\n    }\n    if (layerType === WMS) valid = await wmsValidation();\n    if (layerType === WFS) valid = await wfsValidation();\n    if (layerType === OGC_FEATURE) valid = await ogcFeatureValidation();\n    else if (layerType === XYZ_TILES) valid = xyzValidation();\n    else if (layerType === ESRI_DYNAMIC) valid = await esriValidation(ESRI_DYNAMIC);\n    else if (layerType === ESRI_FEATURE) valid = await esriValidation(ESRI_FEATURE);\n    else if (layerType === GEOJSON) valid = await geoJSONValidation();\n    if (valid) setActiveStep(2);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStep3 = () => {\n    let valid = true;\n    if (layerEntries.length === 0) {\n      valid = false;\n      emitErrorEmpty('Layer');\n    }\n    if (valid) setActiveStep(3);\n  };\n\n  /**\n   * Handle the behavior of the 'Finish' button in the Stepper UI\n   */\n  const handleStepLast = () => {\n    let valid = true;\n    const name = layerName;\n    let url = layerURL;\n    let entries = layerEntries;\n    // if (Array.isArray(entries)) entries = entries.join(',');\n    if (layerType === ESRI_DYNAMIC) url = api.geoUtilities.getMapServerUrl(layerURL);\n    else if (layerType === ESRI_FEATURE) {\n      url = `${api.geoUtilities.getMapServerUrl(layerURL)}/${(layerEntries as TypeDynamicLayerEntry[])[0].index}`;\n      entries = [];\n    }\n\n    if (layerName === '') {\n      valid = false;\n      emitErrorEmpty(isMultiple() ? 'Name' : 'Layer');\n    }\n    const layerConfig: TypeLayerConfig = {\n      id: api.generateId(),\n      name: {\n        en: name,\n        fr: name,\n      },\n      layerType: layerType as TypeWebLayers,\n      url: {\n        en: url,\n        fr: url,\n      },\n      layerEntries: entries,\n    };\n    if (valid) {\n      api.map(mapId).layer.addLayer(layerConfig);\n      setAddLayerVisible(false);\n    }\n  };\n\n  /**\n   * Handle the behavior of the 'Back' button in the Stepper UI\n   */\n  const handleBack = () => {\n    setActiveStep((prevActiveStep: number) => prevActiveStep - 1);\n  };\n\n  /**\n   * Set layer URL from form input\n   *\n   * @param e TextField event\n   */\n  const handleInput = (event: Event) => {\n    setLayerURL(event.target.value);\n    setLayerType('');\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set layerType from form input\n   *\n   * @param {TypeSelectChangeEvent} event TextField event\n   */\n  const handleSelectType = (event: TypeSelectChangeEvent<unknown>) => {\n    setLayerType(event.target.value as TypeWebLayers);\n    setLayerList([]);\n    setLayerName('');\n    setLayerEntries([]);\n  };\n\n  /**\n   * Set the currently selected layer from a list\n   *\n   * @param event Select event\n   * @param newValue value/label pairs of select options\n   */\n  const handleSelectLayer = (event: Event, newValue: string[]) => {\n    if (isMultiple()) {\n      setLayerEntries(\n        newValue.map((x: string) => {\n          if (layerType === ESRI_DYNAMIC) {\n            return {\n              index: parseInt(x[0], 10),\n            } as TypeDynamicLayerEntry;\n          }\n\n          return {\n            id: x[0] as string,\n          } as TypeOgcLayerEntry;\n        })\n      );\n      setLayerName(newValue.map((x) => x[1]).join(', '));\n    } else {\n      if (layerType === ESRI_DYNAMIC) {\n        setLayerEntries([\n          {\n            index: parseInt(newValue[0], 10),\n          } as TypeDynamicLayerEntry,\n        ]);\n      } else {\n        setLayerEntries([\n          {\n            id: newValue[0],\n          } as TypeOgcLayerEntry,\n        ]);\n      }\n      setLayerName(newValue[1]);\n    }\n  };\n\n  /**\n   * Set the layer name from form input\n   *\n   * @param e TextField event\n   */\n  const handleNameLayer = (event: Event) => {\n    setLayerName(event.target.value);\n  };\n\n  /**\n   * Creates a set of Continue / Back buttons\n   *\n   * @param param0 specify if button is first or last in the list\n   * @returns {JSX.Element} React component\n   */\n  // eslint-disable-next-line react/no-unstable-nested-components\n  function NavButtons({ isFirst = false, isLast = false, handleNext }: ButtonProps): JSX.Element {\n    return (\n      <ButtonGroup className={classes.buttonGroup}>\n        <Button variant=\"contained\" type=\"text\" onClick={handleNext}>\n          {isLast ? 'Finish' : 'Continue'}\n        </Button>\n        {!isFirst && (\n          <Button variant=\"contained\" type=\"text\" onClick={handleBack}>\n            Back\n          </Button>\n        )}\n      </ButtonGroup>\n    );\n  }\n\n  return (\n    <Stepper\n      activeStep={activeStep}\n      orientation=\"vertical\"\n      steps={[\n        {\n          stepLabel: {\n            children: 'Enter URL',\n          },\n          stepContent: {\n            children: (\n              <>\n                <TextField sx={{ width: '100%' }} label=\"URL\" variant=\"standard\" value={layerURL} onChange={handleInput} />\n                <br />\n                <NavButtons isFirst handleNext={handleStep1} />\n              </>\n            ),\n          },\n        },\n        {\n          stepLabel: {\n            children: 'Select format',\n          },\n          stepContent: {\n            children: (\n              <>\n                <Select\n                  fullWidth\n                  labelId=\"service-type-label\"\n                  value={layerType}\n                  onChange={handleSelectType}\n                  label=\"Service Type\"\n                  inputLabel={{\n                    id: 'service-type-label',\n                  }}\n                  menuItems={layerOptions.map(([value, label]) => ({\n                    key: value,\n                    item: {\n                      value,\n                      children: label,\n                    },\n                  }))}\n                />\n                <NavButtons handleNext={handleStep2} />\n              </>\n            ),\n          },\n        },\n        {\n          stepLabel: {\n            children: 'Configure layer',\n          },\n          stepContent: {\n            children: (\n              <>\n                {layerList.length === 0 && layerEntries.length === 0 && (\n                  <TextField label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                )}\n                {layerList.length === 0 && layerEntries.length > 0 && <Typography>{layerName}</Typography>}\n                {layerList.length > 1 && (\n                  <Autocomplete\n                    fullWidth\n                    multiple={isMultiple()}\n                    disableCloseOnSelect\n                    disableClearable={!isMultiple()}\n                    id=\"service-layer-label\"\n                    options={layerList}\n                    getOptionLabel={(option) => `${option[1]} (${option[0]})`}\n                    renderOption={(props, option) => <span {...props}>{option[1]}</span>}\n                    // value={\n                    //   layerType === ESRI_DYNAMIC\n                    //     ? layerEntries.map((entry) => {\n                    //         return (entry as TypeDynamicLayerEntry).index.toString();\n                    //       })\n                    //     : layerEntries.map((entry) => {\n                    //         return (entry as TypeOgcLayerEntry).id;\n                    //       })\n                    // }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    onChange={handleSelectLayer as any}\n                    renderInput={(params) => <TextField {...params} label=\"Select Layer\" />}\n                  />\n                )}\n                <br />\n                <NavButtons isLast={!isMultiple()} handleNext={isMultiple() ? handleStep3 : handleStepLast} />\n              </>\n            ),\n          },\n        },\n        isMultiple()\n          ? {\n              stepLabel: {\n                children: 'Enter Name',\n              },\n              stepContent: {\n                children: (\n                  <>\n                    <TextField sx={{ width: '100%' }} label=\"Name\" variant=\"standard\" value={layerName} onChange={handleNameLayer} />\n                    <br />\n                    <NavButtons isLast handleNext={handleStepLast} />\n                  </>\n                ),\n              },\n            }\n          : null,\n      ]}\n    />\n  );\n}\n\nexport default LayerStepper;\n","/* eslint-disable react/no-array-index-key */\nimport {\n  TypeLayersPanelListProps,\n  TypeJsonValue,\n  TypeJsonArray,\n  toJsonObject,\n  TypeJsonObject,\n  AbstractWebLayersClass,\n  TypeWindow,\n  webLayerIsWMS,\n  webLayerIsEsriDynamic,\n  webLayerIsEsriFeature,\n} from 'geoview-core';\n\ntype TypeLegend =\n  | TypeJsonValue[]\n  | {\n      name: string;\n      dataUrl: string[] | string | ArrayBuffer | null;\n    }[];\n\ntype TypeSubLayerVisibility = { [id: string]: number[] };\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that will list the map server layers defined in the map config\n * @param {TypeLayersPanelListProps} props properties passed to the component\n * @returns {JSX.Element} a React JSX Element containing map server layers\n */\nfunction LayersList(props: TypeLayersPanelListProps): JSX.Element {\n  const { mapId, layers, language } = props;\n\n  const { cgpv } = w;\n  const { ui, react, api } = cgpv;\n  const { useState, useEffect } = react;\n\n  const [selectedLayer, setSelectedLayer] = useState<string>('');\n  const [layerLegend, setLayerLegend] = useState<{ [id: string]: TypeLegend }>({});\n  const [layerBounds, setLayerBounds] = useState<Record<string, number[]>>({});\n  const [layerBbox, setLayerBbox] = useState([]);\n  const [layerOpacity, setLayerOpacity] = useState<Record<string, number>>({});\n  const [layerVisibility, setLayerVisibility] = useState<Record<string, boolean>>({});\n  const [subLayerVisibility, setSubLayerVisibility] = useState<TypeSubLayerVisibility>({});\n\n  const { Button, Slider, Tooltip, Checkbox } = ui.elements;\n\n  const translations: TypeJsonObject = toJsonObject({\n    'en-CA': {\n      bounds: 'Toggle Bounds',\n      zoom: 'Zoom to Layer',\n      remove: 'Remove Layer',\n      opacity: 'Adjust Opacity',\n      visibility: 'Toggle Visibility',\n    },\n    'fr-CA': {\n      bounds: 'Basculer la limite',\n      zoom: 'Zoom sur la Couche',\n      remove: 'Supprimer la Couche',\n      opacity: \"Ajuster l'opacité\",\n      visibility: 'Basculer la Visibilité',\n    },\n  });\n\n  const useStyles = ui.makeStyles(() => ({\n    layersContainer: {\n      overflow: 'hidden',\n      overflowY: 'auto',\n      width: '100%',\n    },\n    layerItem: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      margin: '5px 0',\n      padding: '10px 5px',\n      boxSizing: 'content-box',\n      '&:hover': {\n        cursor: 'pointer',\n        backgroundColor: '#c9c9c9',\n      },\n      zIndex: 1000,\n      border: 'none',\n      width: '100%',\n    },\n    layerParentText: {\n      fontSize: '16px',\n      fontWeight: 'bold',\n    },\n    layerCountTextContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      height: '32px',\n    },\n    layerItemText: {\n      fontSize: '14px',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n      marginLeft: '10px',\n      display: 'flex',\n      alignItems: 'center',\n      gap: 6,\n    },\n    flexGroup: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'baseline',\n      gap: 12,\n    },\n    flexGroupButton: {\n      height: 38,\n      minHeight: 38,\n      width: 25,\n      minWidth: 25,\n      '& > div': {\n        textAlign: 'center',\n      },\n    },\n    slider: {\n      width: '100%',\n      paddingLeft: 20,\n      paddingRight: 20,\n    },\n    legendSubLayerGroup: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n  }));\n\n  /**\n   * Calls setLayerLegend for all layers\n   */\n  const setLayerLegendAll = () =>\n    Object.values(layers).forEach(async (layer) => {\n      if (webLayerIsWMS(layer)) {\n        const dataUrl = await layer.getLegendGraphic();\n        const name = layer.url.includes('/MapServer') ? layer.name : '';\n        const legend = [{ name, dataUrl }];\n        setLayerLegend((state) => ({ ...state, [layer.id]: legend }));\n      } else if (webLayerIsEsriDynamic(layer) || webLayerIsEsriFeature(layer)) {\n        const legend = await layer.getLegendJson();\n        const legendArray = Array.isArray(legend) ? legend : [legend];\n        setLayerLegend((state) => ({ ...state, [layer.id]: legendArray }));\n      }\n    });\n\n  /**\n   * Calls setLayerExtent for all layers\n   */\n  const setLayerBoundsAll = () =>\n    Object.values(layers).forEach(async (layer) => {\n      const bounds = await layer.getBounds();\n      setLayerBounds((state) => ({ ...state, [layer.id]: bounds }));\n    });\n\n  useEffect(() => {\n    const defaultLegends = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: [] }), {});\n    setLayerLegend((state) => ({ ...defaultLegends, ...state }));\n    setLayerLegendAll();\n\n    const defaultBounds = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: [] }), {});\n    setLayerBounds((state) => ({ ...defaultBounds, ...state }));\n    setLayerBoundsAll();\n\n    const defaultSliders = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: 100 }), {});\n    setLayerOpacity((state) => ({ ...defaultSliders, ...state }));\n\n    const defaultVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: true }), {});\n    setLayerVisibility((state) => ({ ...defaultVisibility, ...state }));\n\n    const defaultSubVisibility = Object.values(layers).reduce((prev, curr) => ({ ...prev, [curr.id]: curr.entries }), {});\n    setSubLayerVisibility((state) => ({ ...defaultSubVisibility, ...state }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [layers]);\n\n  const classes = useStyles();\n\n  /**\n   * Sets the currently selected layer,\n   * sets to blank if value is same as currently selecetd layer\n   *\n   * @param value layer button value\n   */\n  const onClick = (value: string) => {\n    const selected = value !== selectedLayer ? value : '';\n    setSelectedLayer(selected);\n  };\n\n  /**\n   * Removes selcted layer from map\n   *\n   * @param layer layer config\n   */\n  const onZoom = (layer: AbstractWebLayersClass) => api.map(mapId).fitBounds(layerBounds[layer.id]);\n\n  /**\n   * Returns polygon with segmented top and bottom to handle curved projection\n   *\n   * @param bounds layer bounds\n   * @param segment layer bounds\n   * @returns {L.Polygon} Polygon from bounds\n   */\n  const polygonFromBounds = (bounds: L.LatLngBounds, segments = 100): L.Polygon => {\n    const width = bounds.getEast() - bounds.getWest();\n    const latlngs = [];\n    latlngs.push(bounds.getSouthWest());\n    for (let i = 1; i <= segments; i += 1) {\n      const segmentWidth = width * (i / (segments + 1));\n      const lng = bounds.getWest() + segmentWidth;\n      latlngs.push({ lat: bounds.getSouth(), lng });\n    }\n    latlngs.push(bounds.getSouthEast());\n    latlngs.push(bounds.getNorthEast());\n    for (let i = 1; i <= segments; i += 1) {\n      const segmentWidth = width * (i / (segments + 1));\n      const lng = bounds.getEast() - segmentWidth;\n      latlngs.push({ lat: bounds.getNorth(), lng });\n    }\n    latlngs.push(bounds.getNorthWest());\n    return L.polygon(latlngs, { id: api.generateId(), color: 'red' });\n  };\n\n  /**\n   * Adds bounding box to map\n   *\n   * @param layer layer config\n   */\n  const onBounds = (layer: AbstractWebLayersClass) => {\n    const bbox = polygonFromBounds(layerBounds[layer.id]);\n    const newBbox = JSON.stringify(bbox.toGeoJSON());\n    const oldBbox = JSON.stringify(layerBbox.toGeoJSON());\n    if (newBbox === oldBbox) {\n      layerBbox.remove();\n      setLayerBbox(L.polygon([]));\n    } else {\n      layerBbox.remove();\n      bbox.addTo(api.map(mapId).map);\n      setLayerBbox(bbox);\n    }\n  };\n\n  /**\n   * Removes selcted layer from map, also removing bbox if active\n   *\n   * @param layer layer config\n   */\n  const onRemove = (layer: AbstractWebLayersClass) => {\n    const bbox = polygonFromBounds(layerBounds[layer.id]);\n    const newBbox = JSON.stringify(bbox.toGeoJSON());\n    const oldBbox = JSON.stringify(layerBbox.toGeoJSON());\n    if (newBbox === oldBbox) {\n      layerBbox.remove();\n      setLayerBbox(L.polygon([]));\n    }\n    api.map(mapId).layer.removeLayer(layer);\n  };\n\n  /**\n   * Adjusts layer opacity when slider is moved\n   *\n   * @param value slider opacity value (0-100)\n   * @param data Layer data\n   */\n  const onSliderChange = (value: number, data: AbstractWebLayersClass) => {\n    setLayerOpacity((state) => ({ ...state, [data.id]: value }));\n    const opacity = layerVisibility[data.id] ? value / 100 : 0;\n    data.setOpacity(opacity);\n  };\n\n  /**\n   * Adjusts layer visibility when checkbox is toggled\n   *\n   * @param value checkbox boolean\n   * @param data Layer data\n   */\n  const onVisibilityChange = (value: boolean, data: AbstractWebLayersClass) => {\n    setLayerVisibility((state) => ({ ...state, [data.id]: value }));\n    const opacity = value ? layerOpacity[data.id] / 100 : 0;\n    data.setOpacity(opacity);\n    if (value && data.setEntries) {\n      setSubLayerVisibility((state) => ({ ...state, [data.id]: data.entries as number[] }));\n      data.setEntries(data.entries as number[]);\n    }\n    if (!value && data.setEntries) {\n      setSubLayerVisibility((state) => ({ ...state, [data.id]: [] }));\n      data.setEntries([]);\n    }\n  };\n\n  /**\n   * Adjusts sublayer visibility when checkbox is toggled\n   *\n   * @param value checkbox boolean\n   * @param data Layer data\n   * @param id sublayer ID\n   */\n  const onSubVisibilityChange = (value: boolean, data: AbstractWebLayersClass, id: number) => {\n    const oldEntries = subLayerVisibility[data.id];\n    const entries = value ? [...new Set([...oldEntries, id])] : oldEntries.filter((x) => x !== id);\n    if (oldEntries.length === 0) {\n      setLayerVisibility((state) => ({ ...state, [data.id]: true }));\n      data.setOpacity(layerOpacity[data.id] / 100);\n    }\n    if (entries.length === 0) {\n      setLayerVisibility((state) => ({ ...state, [data.id]: false }));\n      data.setOpacity(0);\n    }\n    setSubLayerVisibility((state) => ({ ...state, [data.id]: entries }));\n    if (data.setEntries) data.setEntries(entries);\n  };\n\n  return (\n    <div className={classes.layersContainer}>\n      {Object.values(layers).map((layer) => (\n        <div key={layer.id}>\n          <button type=\"button\" className={classes.layerItem} onClick={() => onClick(layer.id)}>\n            <div className={classes.layerCountTextContainer}>\n              <div className={classes.layerItemText} title={layer.name}>\n                {layer.name}\n              </div>\n            </div>\n          </button>\n          {selectedLayer === layer.id && (\n            <>\n              <div className={classes.flexGroup}>\n                <Button\n                  className={classes.flexGroupButton}\n                  tooltip={translations[language].zoom as string}\n                  tooltipPlacement=\"top\"\n                  variant=\"contained\"\n                  type=\"icon\"\n                  icon='<i class=\"material-icons\">zoom_in</i>'\n                  onClick={() => onZoom(layer)}\n                />\n                <Button\n                  className={classes.flexGroupButton}\n                  tooltip={translations[language].bounds as string}\n                  tooltipPlacement=\"top\"\n                  variant=\"contained\"\n                  type=\"icon\"\n                  icon='<i class=\"material-icons\">crop_free</i>'\n                  onClick={() => onBounds(layer)}\n                />\n                <Button\n                  className={classes.flexGroupButton}\n                  tooltip={translations[language].remove as string}\n                  tooltipPlacement=\"top\"\n                  variant=\"contained\"\n                  type=\"icon\"\n                  icon='<i class=\"material-icons\">remove</i>'\n                  onClick={() => onRemove(layer)}\n                />\n              </div>\n              <div className={classes.flexGroup}>\n                <Tooltip title={translations[language].opacity}>\n                  <i className=\"material-icons\">contrast</i>\n                </Tooltip>\n                <div className={classes.slider}>\n                  <Slider\n                    id={api.generateId()}\n                    min={0}\n                    max={100}\n                    size=\"small\"\n                    value={layerOpacity[layer.id]}\n                    valueLabelDisplay=\"auto\"\n                    customOnChange={(value) => onSliderChange(value as number, layer)}\n                  />\n                </div>\n                <Tooltip title={translations[language].visibility}>\n                  <Checkbox checked={layerVisibility[layer.id]} onChange={(e) => onVisibilityChange(e.target.checked, layer)} />\n                </Tooltip>\n              </div>\n              {(layerLegend[layer.id] as TypeJsonArray).map((subLayer, index: number) => (\n                <div key={index}>\n                  {subLayer!.legend && (\n                    <div className={classes.legendSubLayerGroup}>\n                      <div className={classes.layerItemText} title={subLayer.layerName as string}>\n                        {subLayer.layerName}\n                      </div>\n                      <Tooltip title={translations[language].visibility}>\n                        <Checkbox\n                          checked={subLayerVisibility[layer.id].includes(subLayer.layerId as number)}\n                          onChange={(e) => onSubVisibilityChange(e.target.checked, layer, subLayer.layerId as number)}\n                        />\n                      </Tooltip>\n                    </div>\n                  )}\n                  {(subLayer.drawingInfo?.renderer.type as string) === 'simple' && subLayer.drawingInfo?.renderer.symbol.imageData && (\n                    <div className={classes.layerItemText}>\n                      <img\n                        alt=\"Layer Legend\"\n                        src={`data:${subLayer.drawingInfo?.renderer.symbol.contentType};base64,${subLayer.drawingInfo?.renderer.symbol.imageData}`}\n                      />\n                      {subLayer.drawingInfo?.renderer.label || subLayer.name}\n                    </div>\n                  )}\n                  {subLayer.drawingInfo?.renderer.type === 'uniqueValue' &&\n                    subLayer.drawingInfo.renderer.uniqueValueInfos[0].symbol.imageData &&\n                    (subLayer.drawingInfo.renderer.uniqueValueInfos as TypeJsonArray).map((uniqueValue, i: number) => (\n                      <div key={i} className={classes.layerItemText}>\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.symbol.contentType};base64,${uniqueValue.symbol.imageData}`} />\n                        {uniqueValue.label}\n                      </div>\n                    ))}\n                  {subLayer.legend &&\n                    (subLayer.legend as TypeJsonArray).map((uniqueValue, i: number) => (\n                      <div key={i} className={classes.layerItemText}>\n                        <img alt=\"Layer Legend\" src={`data:${uniqueValue.contentType};base64,${uniqueValue.imageData}`} />\n                        {uniqueValue.label || subLayer.layerName}\n                      </div>\n                    ))}\n                  {subLayer.dataUrl && (\n                    <div className={classes.layerItemText}>\n                      <img alt=\"Layer Legend\" src={subLayer.dataUrl as string} />\n                      {subLayer.name}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default LayersList;\n","import { toJsonObject, TypePanelContentProps, TypeJsonObject, TypeWindow } from 'geoview-core';\n\nimport LayerStepper from './layer-stepper';\nimport LayersList from './layers-list';\n\nconst w = window as TypeWindow;\n\n/**\n * A react component that displays the details panel content\n *\n * @param {TypePanelContentProps} props the properties of the pane content\n * @returns {JSX.Element} A React JSX Element with the details panel\n */\nfunction PanelContent(props: TypePanelContentProps): JSX.Element {\n  const { mapId, buttonPanel } = props;\n\n  const { cgpv } = w;\n  const { api, react, ui } = cgpv;\n  const { useState, useEffect } = react;\n  const [addLayerVisible, setAddLayerVisible] = useState(false);\n  const [mapLayers, setMapLayers] = useState({});\n  const { Button } = ui.elements;\n\n  const { language } = api.map(mapId);\n\n  const translations: TypeJsonObject = toJsonObject({\n    'en-CA': {\n      addLayer: 'Add Layer',\n    },\n    'fr-CA': {\n      addLayer: 'Ajouter Couche',\n    },\n  });\n\n  const useStyles = ui.makeStyles(() => ({\n    mainContainer: {\n      display: 'flex',\n      flexDirection: 'row',\n    },\n    addLayerButton: {\n      width: 50,\n      minWidth: 50,\n      '& > div': {\n        textAlign: 'center',\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  const onClick = () => setAddLayerVisible((state: boolean) => !state);\n\n  useEffect(() => {\n    setMapLayers(() => ({ ...api.map(mapId).layer.layers }));\n\n    api.event.on(\n      api.eventNames.LAYER.EVENT_LAYER_ADDED,\n      () =>\n        setMapLayers(() => ({\n          ...api.map(mapId).layer.layers,\n        })),\n      mapId\n    );\n    api.event.on(\n      api.eventNames.LAYER.EVENT_REMOVE_LAYER,\n      () =>\n        setMapLayers(() => ({\n          ...api.map(mapId).layer.layers,\n        })),\n      mapId\n    );\n    api.event.on(\n      api.eventNames.PANEL.EVENT_PANEL_CLOSE,\n      () => {\n        setAddLayerVisible(false);\n      },\n      mapId,\n      buttonPanel.id\n    );\n\n    return () => {\n      api.event.off(api.eventNames.LAYER.EVENT_LAYER_ADDED, mapId);\n      api.event.off(api.eventNames.LAYER.EVENT_REMOVE_LAYER, mapId);\n      api.event.off(api.eventNames.PANEL.EVENT_PANEL_CLOSE, mapId, buttonPanel.id);\n    };\n  }, [api, buttonPanel.id, mapId]);\n\n  return (\n    <>\n      <div className={classes.mainContainer}>\n        <Button\n          className={classes.addLayerButton}\n          tooltip={translations[language].addLayer as string}\n          tooltipPlacement=\"right\"\n          variant=\"contained\"\n          type=\"icon\"\n          icon='<i class=\"material-icons\">add</i>'\n          onClick={onClick}\n        />\n      </div>\n      {addLayerVisible && <LayerStepper mapId={mapId} setAddLayerVisible={setAddLayerVisible} />}\n      <div style={{ display: addLayerVisible ? 'none' : 'inherit' }}>\n        <LayersList mapId={mapId} layers={mapLayers} language={language} />\n      </div>\n    </>\n  );\n}\n\nexport default PanelContent;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport {\n  Cast,\n  AbstractPluginClass,\n  toJsonObject,\n  TypeJsonObject,\n  TypeWindow,\n  TypePluginOptions,\n  TypeButtonPanel,\n  TypeIconButtonProps,\n  TypePanelProps,\n  TypeSchemaObject,\n} from 'geoview-core';\nimport PanelContent from './panel-content';\nimport schema from '../schema.json';\nimport defaultConfig from '../default-config-layers-panel.json';\n\nconst w = window as TypeWindow;\n\n/**\n * Create a class for the plugin instance\n */\nclass LayersPanelPlugin extends AbstractPluginClass {\n  // store the created button panel object\n  buttonPanel: TypeButtonPanel | null;\n\n  constructor(id: string, props: TypePluginOptions) {\n    super(id, props);\n    this.buttonPanel = null;\n  }\n\n  /**\n   * Return the schema that is defined for this package\n   *\n   * @returns {TypeSchemaObject} returns the schema for this package\n   */\n  schema = (): TypeSchemaObject => schema;\n\n  /**\n   * Return the default config for this package\n   *\n   * @returns {TypeJsonObject} the default config\n   */\n  defaultConfig = (): TypeJsonObject => toJsonObject(defaultConfig);\n\n  /**\n   * translations object to inject to the viewer translations\n   */\n  translations: TypeJsonObject = toJsonObject({\n    'en-CA': {\n      layersPanel: 'Layers',\n    },\n    'fr-CA': {\n      layersPanel: 'Couches',\n    },\n  });\n\n  /**\n   * Added function called after the plugin has been initialized\n   */\n  added = (): void => {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api, ui } = cgpv;\n    const { LayersOutlinedIcon } = ui.elements;\n    const { language } = api.map(mapId);\n\n    let panelStatus = false;\n\n    panelStatus = this.configObj?.isOpen?.large as boolean;\n\n    // button props\n    const button: TypeIconButtonProps = {\n      id: 'layersPanelButton',\n      tooltip: this.translations[language].layersPanel as string,\n      tooltipPlacement: 'right',\n      children: <LayersOutlinedIcon />,\n      visible: true,\n    };\n\n    // panel props\n    const panel: TypePanelProps = {\n      title: this.translations[language].layersPanel,\n      icon: '<i class=\"material-icons\">layers</i>',\n      width: 200,\n      status: panelStatus,\n    };\n\n    // create a new button panel on the appbar\n    this.buttonPanel = api.map(mapId).appBarButtons.createAppbarPanel(button, panel, null);\n\n    // set panel content\n    this.buttonPanel?.panel?.changeContent(<PanelContent buttonPanel={this.buttonPanel} mapId={mapId} />);\n  };\n\n  /**\n   * Function called when the plugin is removed, used for clean up\n   */\n  removed(): void {\n    const { mapId } = this.pluginProps;\n\n    // access the cgpv object from the window object\n    const { cgpv } = w;\n\n    // access the api calls\n    const { api } = cgpv;\n\n    if (this.buttonPanel) {\n      api.map(mapId).appBarButtons.removeAppbarPanel(this.buttonPanel.id);\n    }\n  }\n}\n\nexport default LayersPanelPlugin;\n\nw.plugins = w.plugins || {};\nw.plugins['layers-panel'] = Cast<AbstractPluginClass>(LayersPanelPlugin);\n"],"names":["w","window","mapId","setAddLayerVisible","cgpv","api","react","ui","layerTypes","ESRI_DYNAMIC","ESRI_FEATURE","GEOJSON","WMS","WFS","OGC_FEATURE","XYZ_TILES","useState","elements","Select","Stepper","TextField","Button","ButtonGroup","Typography","Autocomplete","activeStep","setActiveStep","layerURL","setLayerURL","layerType","setLayerType","layerList","setLayerList","layerName","setLayerName","layerEntries","setLayerEntries","classes","makeStyles","buttonGroup","paddingTop","gap","useStyles","isMultiple","layerOptions","esriOptions","type","err","capability","emitErrorEmpty","textField","event","emit","snackbarMessagePayload","eventNames","SNACKBAR","EVENT_SNACKBAR_OPEN","value","emitErrorServer","serviceName","emitErrorProj","proj","supportedProj","join","wmsValidation","map","projection","getCRS","code","geoUtilities","getWMSServiceMetadata","wms","Capability","Layer","CRS","includes","Error","layers","aLayer","Name","Title","length","id","wfsValidation","getWFSServiceMetadata","wfs","FeatureTypeList","FeatureType","aFeatureType","toJsonObject","split","ogcFeatureValidation","keys","fetch","response","json","every","key","Object","collections","title","esriValidation","getESRIServiceMetadata","esri","capabilities","name","index","xyzValidation","tiles","i","geoJSONValidation","handleStep2","valid","undefined","handleStepLast","url","entries","getMapServerUrl","layerConfig","generateId","en","fr","layer","addLayer","handleBack","prevActiveStep","handleNameLayer","target","NavButtons","isFirst","isLast","handleNext","className","variant","onClick","orientation","steps","stepLabel","children","stepContent","sx","width","label","onChange","trim","fullWidth","labelId","inputLabel","menuItems","item","multiple","disableCloseOnSelect","disableClearable","options","getOptionLabel","option","renderOption","props","newValue","x","parseInt","renderInput","params","language","useEffect","selectedLayer","setSelectedLayer","layerLegend","setLayerLegend","layerBounds","setLayerBounds","layerBbox","setLayerBbox","layerOpacity","setLayerOpacity","layerVisibility","setLayerVisibility","subLayerVisibility","setSubLayerVisibility","Slider","Tooltip","Checkbox","translations","bounds","zoom","remove","opacity","visibility","layersContainer","overflow","overflowY","layerItem","display","alignItems","justifyContent","margin","padding","boxSizing","cursor","backgroundColor","zIndex","border","layerParentText","fontSize","fontWeight","layerCountTextContainer","height","layerItemText","whiteSpace","textOverflow","marginLeft","flexGroup","flexGroupButton","minHeight","minWidth","textAlign","slider","paddingLeft","paddingRight","legendSubLayerGroup","defaultLegends","values","reduce","prev","curr","state","forEach","webLayerIsWMS","getLegendGraphic","dataUrl","legend","webLayerIsEsriDynamic","webLayerIsEsriFeature","getLegendJson","legendArray","Array","isArray","defaultBounds","getBounds","defaultSliders","defaultVisibility","defaultSubVisibility","polygonFromBounds","segments","getEast","getWest","latlngs","push","getSouthWest","segmentWidth","lng","lat","getSouth","getSouthEast","getNorthEast","getNorth","getNorthWest","L","polygon","color","tooltip","tooltipPlacement","icon","fitBounds","onZoom","bbox","JSON","stringify","toGeoJSON","addTo","onBounds","removeLayer","onRemove","min","max","size","valueLabelDisplay","customOnChange","data","setOpacity","onSliderChange","checked","e","setEntries","onVisibilityChange","subLayer","layerId","oldEntries","Set","filter","drawingInfo","renderer","symbol","imageData","alt","src","contentType","uniqueValueInfos","uniqueValue","buttonPanel","addLayerVisible","mapLayers","setMapLayers","mainContainer","flexDirection","addLayerButton","on","LAYER","EVENT_LAYER_ADDED","EVENT_REMOVE_LAYER","PANEL","EVENT_PANEL_CLOSE","off","style","LayersPanelPlugin","schema","defaultConfig","layersPanel","panelStatus","pluginProps","LayersOutlinedIcon","configObj","isOpen","large","button","visible","panel","status","appBarButtons","createAppbarPanel","changeContent","this","removeAppbarPanel","AbstractPluginClass","plugins","Cast"],"sourceRoot":""}